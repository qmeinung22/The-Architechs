@page
@model SavedLocationModel

<h2>Saved Locations</h2>

<table class="table">
    <thead>
        <tr>
            <th>Title</th>
            <th>Latitude</th>
            <th>Longitude</th>
            <th>Address</th>
            <th>Notification Radius (mi)</th>
            <th>Actions</th>
            <th>Time Interval</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var location in Model.UserLocations)
        {
            <tr>
                <td>@location.Title</td>
                <td>@location.Latitude.ToString("0.######")</td>
                <td>@location.Longitude.ToString("0.######")</td>

                <td>@location.Address</td>
                <td>@location.NotificationRadius</td>
                <td>@location.TimeInterval hour(s)</td>
                <td>
                    <form asp-controller="UserLocation" asp-action="DeleteUserLocation" asp-route-id="@location.Id"
                        method="post">
                        <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>

<hr />

<h3>Add New Location</h3>
<form method="post" asp-action="PostUserLocation" asp-controller="UserLocation">
    <div class="form-group">
        <label>Title</label>
        <input type="text" class="form-control" id="title" name="Title" maxlength="15" required>
        <small class="text-danger d-none" id="title-warning">Title must be 15 characters or less.</small>
    </div>
    <div class="form-group">
        <label>Latitude</label>
        <input type="number" step="0.000001" class="form-control" id="latitude" name="Latitude" required>
        <small class="text-danger d-none" id="latitude-warning">Latitude must have at most 6 decimal places.</small>
    </div>
    <div class="form-group">
        <label>Longitude</label>
        <input type="number" step="0.000001" class="form-control" id="longitude" name="Longitude" required>
        <small class="text-danger d-none" id="longitude-warning">Longitude must have at most 6 decimal places.</small>
    </div>
    <div class="form-group">
        <label>Address</label>
        <input type="text" class="form-control" id="address" name="Address" maxlength="35" required>
        <small class="text-danger d-none" id="address-warning">Address must be 35 characters or less.</small>
    </div>
    <div class="form-group">
        <label>Notification Radius (mi)</label>
        <input type="number" class="form-control" id="radius" name="NotificationRadius" min="1" max="50" required>
        <small class="text-danger d-none" id="radius-warning">Radius must be between 1 and 50.</small>
    </div>
    <div class="form-group">
        <label for="timeInterval">Notification Interval (hours)</label>
        <select id="timeInterval" name="timeInterval" class="form-control">
            <option value="1">Every 1 hour</option>
            <option value="5">Every 5 hours</option>
            <option value="10">Every 10 hours</option>
            <option value="24" selected>Every 24 hours</option>
            <option value="0">Test (Every 1 minute)</option>
        </select>
    </div>

    <br />
    <button type="submit" class="btn btn-primary">Add Location</button>
</form>


@section Scripts {
    <script>
        const userId = '@User.FindFirst("sub")?.Value';

        async function loadUserLocations() {
            const response = await fetch(`/api/UserLocation/${userId}`);
            const locations = await response.json();
            const tbody = document.getElementById("locationsTableBody");
            tbody.innerHTML = "";

            locations.forEach(location => {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${location.title}</td>
                    <td>${location.latitude}</td>
                    <td>${location.longitude}</td>
                    <td>${location.address ?? ""}</td>
                    <td>${location.notificationRadius}</td>
                    <td>
                        <button class="btn btn-warning btn-sm" onclick="editLocation(${location.id})">Edit</button>
                        <button class="btn btn-danger btn-sm" onclick="deleteLocation(${location.id})">Delete</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        document.getElementById('addLocationBtn').addEventListener('click', async () => {
            const title = document.getElementById('title').value;
            const latitude = parseFloat(document.getElementById('latitude').value);
            const longitude = parseFloat(document.getElementById('longitude').value);
            const address = document.getElementById('address').value;
            const radius = parseInt(document.getElementById('radius').value);
            const interval = parseInt(document.getElementById('timeInterval').value);

            const location = {
                Title: title,
                Latitude: latitude,
                Longitude: longitude,
                Address: address,
                NotificationRadius: radius,
                UserId: userId,
                TimeInterval: interval
            };

            const response = await fetch('/api/UserLocation', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(location)
            });

            const statusDiv = document.getElementById('statusMessage');
            if (response.ok) {
                statusDiv.textContent = '‚úÖ Location added successfully!';
                clearForm();
                await loadUserLocations(); // Refresh table
            } else {
                statusDiv.textContent = '‚ùå Failed to add location.';
            }
        });

        function clearForm() {
            document.getElementById('title').value = '';
            document.getElementById('latitude').value = '';
            document.getElementById('longitude').value = '';
            document.getElementById('address').value = '';
            document.getElementById('radius').value = '';
        }

        async function deleteLocation(id) {
            if (!confirm("Are you sure you want to delete this location?")) return;

            const response = await fetch(`/api/UserLocation/${id}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                await loadUserLocations(); // Refresh table
            }
        }

        function editLocation(id) {
            alert(`üõ† Edit functionality coming soon for ID ${id}`);
            // We'll build a modal or inline edit next!
        }

        // Load the user's saved locations when the page loads
        window.onload = loadUserLocations;
    </script>
    <script>
        function enforceDecimalLimit(inputId, warningId, maxDecimals = 6) {
            const input = document.getElementById(inputId);
            const warning = document.getElementById(warningId);

            input.addEventListener("input", function () {
                const value = this.value;
                const decimalPart = value.split(".")[1];

                if (decimalPart && decimalPart.length > maxDecimals) {
                    warning.classList.remove("d-none");
                    this.setCustomValidity(`Value can only have up to ${maxDecimals} decimal places.`);
                } else {
                    warning.classList.add("d-none");
                    this.setCustomValidity("");
                }
            });
        }

        enforceDecimalLimit("latitude", "latitudeWarning");
        enforceDecimalLimit("longitude", "longitudeWarning");
    </script>
}
